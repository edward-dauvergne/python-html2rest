#!/usr/bin/env python

import sys
try:
    from urllib import urlopen
except ImportError:
    from urllib.request import urlopen
import codecs
import locale
from optparse import OptionParser

from html2rest import html2rest


def arguments():
    """Process the command line arguments."""

    # Set up the parser object.
    parser = OptionParser(usage="usage: %prog [URL/input file] [output file]")

    # Add the options.
    parser.add_option('-e', '--encoding', action='store', type='string', dest='encoding', default=(locale.getpreferredencoding() or 'utf8'), help='choose the text encoding')
    parser.add_option('-r', '--relto', action='store', type='string', dest='relto', help='set the relative path')
    parser.add_option('-w', '--wrap-width', action='store', type='int', dest='wrap_width', default=80, help='number of characters for the line wrapping width (defaults to 80)', metavar='NUM')
    parser.add_option('--no-wrap', action='store_true', dest='nowrap', default=0, help='disable line wrapping')
    parser.add_option('-b', '--embedded-uri', action='store_true', dest='embedded_uri', default=0, help='enable embedded URIs (less readable text, but more reliable hyperlinks)')

    # Parse the options.
    options, args = parser.parse_args()

    # Argument number check.
    if len(args) > 2:
        parser.error("unknown arguments")

    # Process the URL or file name.
    fileobj = sys.stdin
    if len(args):
        if '://' in args[0]:
            fileobj = urlopen(args[0])
        else:
            fileobj = open(arg, 'rb')

    # Process the output file name.
    writer = sys.stdout
    if len(args) == 2:
        writer = open(args[1], 'w')

    # Return the arguments.
    return fileobj, writer, options


# Parse the arguments.
fileobj, writer, options = arguments()

# Execute.
try:
    html2rest(fileobj.read(), writer=writer, encoding=options.encoding, relto=options.relto, wrap_width=options.wrap_width, nowrap=options.nowrap, embedded_uri=options.embedded_uri)
finally:
    try:
        fileobj.close()
    except:
        pass
